{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoRandom';\n  },\n\n  getRandomBytesAsync: function getRandomBytesAsync(length) {\n    var array;\n    return _regeneratorRuntime.async(function getRandomBytesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            array = new Uint8Array(length);\n            return _context.abrupt(\"return\", window.crypto.getRandomValues(array));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoRandom.web.ts"],"names":[],"mappings":";AAAA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,YAAP;AACD,GAHY;;AAIP,EAAA,mBAJO,+BAIa,MAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAKL,YAAA,KALK,GAKG,IAAI,UAAJ,CAAe,MAAf,CALH;AAAA,6CAMJ,MAAM,CAAC,MAAP,CAAc,eAAd,CAA8B,KAA9B,CANI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return window.crypto.getRandomValues(array);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}