{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport { getSessionUrlProvider } from \"./SessionUrlProvider\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar sessionUrlProvider = getSessionUrlProvider();\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n\n    _classCallCheck(this, AuthRequest);\n\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandomAsync(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    invariant(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.usePKCE) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.ensureCodeIsSetupAsync());\n\n            case 3:\n              _context.t0 = this.responseType;\n              _context.t1 = this.clientId;\n              _context.t2 = this.redirectUri;\n              _context.t3 = this.scopes;\n              _context.t4 = this.clientSecret;\n              _context.t5 = this.codeChallenge;\n              _context.t6 = this.codeChallengeMethod;\n              _context.t7 = this.prompt;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(this.getStateAsync());\n\n            case 13:\n              _context.t8 = _context.sent;\n              _context.t9 = this.extraParams;\n              _context.t10 = this.usePKCE;\n              return _context.abrupt(\"return\", {\n                responseType: _context.t0,\n                clientId: _context.t1,\n                redirectUri: _context.t2,\n                scopes: _context.t3,\n                clientSecret: _context.t4,\n                codeChallenge: _context.t5,\n                codeChallengeMethod: _context.t6,\n                prompt: _context.t7,\n                state: _context.t8,\n                extraParams: _context.t9,\n                usePKCE: _context.t10\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"promptAsync\",\n    value: function promptAsync(discovery) {\n      var _ref,\n          url,\n          options,\n          startUrl,\n          returnUrl,\n          result,\n          useProxy,\n          openOptions,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.async(function promptAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, url = _ref.url, options = _objectWithoutProperties(_ref, [\"url\"]);\n\n              if (url) {\n                _context2.next = 15;\n                break;\n              }\n\n              if (this.url) {\n                _context2.next = 14;\n                break;\n              }\n\n              _context2.t0 = this;\n              _context2.t1 = discovery;\n              _context2.t2 = _objectSpread;\n              _context2.t3 = _objectSpread({}, options);\n              _context2.t4 = {};\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(this.makeAuthUrlAsync(discovery));\n\n            case 10:\n              _context2.t5 = _context2.sent;\n              _context2.t6 = {\n                url: _context2.t5\n              };\n              _context2.t7 = (0, _context2.t2)(_context2.t3, _context2.t4, _context2.t6);\n              return _context2.abrupt(\"return\", _context2.t0.promptAsync.call(_context2.t0, _context2.t1, _context2.t7));\n\n            case 14:\n              url = this.url;\n\n            case 15:\n              invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n              startUrl = url;\n              returnUrl = this.redirectUri;\n\n              if (options.useProxy) {\n                returnUrl = sessionUrlProvider.getDefaultReturnUrl();\n                startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n              }\n\n              if (!_authLock) {\n                _context2.next = 22;\n                break;\n              }\n\n              if (__DEV__) {\n                console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: 'locked'\n              });\n\n            case 22:\n              _authLock = true;\n              _context2.prev = 23;\n              useProxy = options.useProxy, openOptions = _objectWithoutProperties(options, [\"useProxy\"]);\n              _context2.next = 27;\n              return _regeneratorRuntime.awrap(WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions));\n\n            case 27:\n              result = _context2.sent;\n\n            case 28:\n              _context2.prev = 28;\n              _authLock = false;\n              return _context2.finish(28);\n\n            case 31:\n              if (!(result.type === 'opened')) {\n                _context2.next = 33;\n                break;\n              }\n\n              throw new Error('An unexpected error occurred');\n\n            case 33:\n              if (!(result.type !== 'success')) {\n                _context2.next = 35;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: result.type\n              });\n\n            case 35:\n              return _context2.abrupt(\"return\", this.parseReturnUrl(result.url));\n\n            case 36:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[23,, 28, 31]], Promise);\n    }\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n          params = _QueryParams$getQuery.params,\n          errorCode = _QueryParams$getQuery.errorCode;\n\n      var state = params.state,\n          _params$error = params.error,\n          error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function makeAuthUrlAsync(discovery) {\n      var _request$scopes;\n\n      var request, params, extra, query;\n      return _regeneratorRuntime.async(function makeAuthUrlAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getAuthRequestConfigAsync());\n\n            case 2:\n              request = _context3.sent;\n\n              if (request.state) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot make request URL without a valid `state` loaded');\n\n            case 5:\n              params = {};\n\n              if (request.codeChallenge) {\n                params.code_challenge = request.codeChallenge;\n              }\n\n              for (extra in request.extraParams) {\n                if (extra in request.extraParams) {\n                  params[extra] = request.extraParams[extra];\n                }\n              }\n\n              if (request.usePKCE && request.codeChallengeMethod) {\n                params.code_challenge_method = request.codeChallengeMethod;\n              }\n\n              if (request.clientSecret) {\n                params.client_secret = request.clientSecret;\n              }\n\n              if (request.prompt) {\n                params.prompt = request.prompt;\n              }\n\n              params.redirect_uri = request.redirectUri;\n              params.client_id = request.clientId;\n              params.response_type = request.responseType;\n              params.state = request.state;\n\n              if ((_request$scopes = request.scopes) == null ? void 0 : _request$scopes.length) {\n                params.scope = request.scopes.join(' ');\n              }\n\n              query = QueryParams.buildQueryString(params);\n              this.url = discovery.authorizationEndpoint + \"?\" + query;\n              return _context3.abrupt(\"return\", this.url);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getStateAsync\",\n    value: function getStateAsync() {\n      return _regeneratorRuntime.async(function getStateAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(this.state instanceof Promise)) {\n                _context4.next = 4;\n                break;\n              }\n\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(this.state);\n\n            case 3:\n              this.state = _context4.sent;\n\n            case 4:\n              return _context4.abrupt(\"return\", this.state);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function ensureCodeIsSetupAsync() {\n      var _await$PKCE$buildCode, codeVerifier, codeChallenge;\n\n      return _regeneratorRuntime.async(function ensureCodeIsSetupAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!this.codeVerifier) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 2:\n              _context5.next = 4;\n              return _regeneratorRuntime.awrap(PKCE.buildCodeAsync());\n\n            case 4:\n              _await$PKCE$buildCode = _context5.sent;\n              codeVerifier = _await$PKCE$buildCode.codeVerifier;\n              codeChallenge = _await$PKCE$buildCode.codeChallenge;\n              this.codeVerifier = codeVerifier;\n              this.codeChallenge = codeChallenge;\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return AuthRequest;\n}();","map":{"version":3,"sources":["../src/AuthRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport { getSessionUrlProvider } from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nconst sessionUrlProvider = getSessionUrlProvider();\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n/**\n * Implements an authorization request.\n *\n * [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: Promise<string> | string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandomAsync(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: await this.getStateAsync(),\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl();\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async getStateAsync(): Promise<string> {\n    // Resolve any pending state.\n    if (this.state instanceof Promise) this.state = await this.state;\n    return this.state;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}