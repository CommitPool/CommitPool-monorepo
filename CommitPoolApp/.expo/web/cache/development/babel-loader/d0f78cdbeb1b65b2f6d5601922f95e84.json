{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\nimport ExpoRandom from \"./ExpoRandom\";\n\nfunction assertByteCount(value) {\n  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n    throw new TypeError(\"expo-random: getRandomBytesAsync(\" + value + \") expected a valid number from range 0...1024\");\n  }\n}\n\nexport function getRandomBytesAsync(byteCount) {\n  var validByteCount, base64;\n  return _regeneratorRuntime.async(function getRandomBytesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          assertByteCount(byteCount);\n          validByteCount = Math.floor(byteCount);\n\n          if (!ExpoRandom.getRandomBytesAsync) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExpoRandom.getRandomBytesAsync(validByteCount));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n          if (!ExpoRandom.getRandomBase64StringAsync) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(ExpoRandom.getRandomBase64StringAsync(validByteCount));\n\n        case 11:\n          base64 = _context.sent;\n          return _context.abrupt(\"return\", toByteArray(base64));\n\n        case 15:\n          throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Random.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,kBAApC;AACA,SAAS,WAAT,QAA4B,WAA5B;AAEA,OAAO,UAAP;;AAEA,SAAS,eAAT,CAAyB,KAAzB,EAAmC;AACjC,MACE,OAAO,KAAP,KAAiB,QAAjB,IACA,KAAK,CAAC,KAAD,CADL,IAEA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,CAFpB,IAGA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,IAJtB,EAKE;AACA,UAAM,IAAI,SAAJ,uCACgC,KADhC,mDAAN;AAGD;AACF;;AAED,OAAO,SAAe,mBAAf,CAAmC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,eAAe,CAAC,SAAD,CAAf;AACM,UAAA,cAFD,GAEkB,IAAI,CAAC,KAAL,CAAW,SAAX,CAFlB;;AAAA,eAGD,UAAU,CAAC,mBAHV;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIU,UAAU,CAAC,mBAAX,CAA+B,cAA/B,CAJV;;AAAA;AAAA;;AAAA;AAAA,eAKM,UAAU,CAAC,0BALjB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMkB,UAAU,CAAC,0BAAX,CAAsC,cAAtC,CANlB;;AAAA;AAMG,UAAA,MANH;AAAA,2CAOI,WAAW,CAAC,MAAD,CAPf;;AAAA;AAAA,gBASG,IAAI,mBAAJ,CAAwB,aAAxB,EAAuC,qBAAvC,CATH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\n\nimport ExpoRandom from './ExpoRandom';\n\nfunction assertByteCount(value: any): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-random: getRandomBytesAsync(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount);\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytesAsync) {\n    return await ExpoRandom.getRandomBytesAsync(validByteCount);\n  } else if (ExpoRandom.getRandomBase64StringAsync) {\n    const base64 = await ExpoRandom.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}