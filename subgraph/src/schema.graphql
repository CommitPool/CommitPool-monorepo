type Committer @entity {
	id: ID!
	commitments: [Commitment!]! @derivedFrom(field: "committer")
	deposits: [Deposit!]! @derivedFrom(field: "committer")
	withdrawals: [Withdrawal!] @derivedFrom(field: "committer")
	balance: BigInt!
	nCommitmentsMade: Int
	nCommitmentsMet: Int
	nCommitmentsFailed: Int
	cumPenalties: BigInt
	# cumRewards: BigInt
}

enum CommitmentStatus {
	open
	succeeded
	failed
}

type Commitment @entity {
	id: ID!
	committer: Committer!
	activity: Activity!
	goalValue: BigInt!
	reportedValue: BigInt
	startTime: BigInt!
	endTime: BigInt!
	stake: BigInt!
	penalty: BigInt
	# reward: BigInt
	status: CommitmentStatus!
	createdAt: BigInt!
	commitmentTxHash: Bytes!
	processedAt: BigInt
	processTxHash: Bytes
	requests: [OracleRequest!] @derivedFrom(field: "commitment")
}

type Deposit @entity {
	id: ID!
	committer: Committer!
	amount: BigInt!
	depositedAt: BigInt!
	depositTxHash: Bytes!
}

type Withdrawal @entity {
	id: ID!
	committer: Committer!
	amount: BigInt!
	withdrawnAt: BigInt!
	withdrawalTxHash: Bytes!
}

enum ActivityStatus {
	allowed
	disallowed
	deleted
}

type Activity @entity {
	id: ID! # should be the activity name
	contractKey: Bytes!
	oracle: Bytes!
	status: ActivityStatus!
	updates: [ActivityUpdate!]! @derivedFrom(field: "activity")
}

type ActivityUpdate @entity {
	id: ID!
	activity: Activity!
	newOracle: Bytes
	newStatus: ActivityStatus
	updatedAt: BigInt!
	updateTxHash: Bytes!
}

type OracleRequest @entity {
	id: ID! # the chainlink requestId
	commitment: Commitment!
	response: BigInt
	requestedAt: BigInt!
	requestTxHash: Bytes!
	respondedAt: BigInt
	responseTxHash: Bytes
}
